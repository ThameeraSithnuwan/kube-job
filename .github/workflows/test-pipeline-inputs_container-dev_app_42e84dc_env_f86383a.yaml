name: >-
  test-pipeline-inputs_container-dev_app_42e84dc_env_f86383a Pipeline (Skyu
  Generated)
'on':
  push:
    branches:
      - master
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_fcdb47f7-ec13-4c8c-a137-99cd0e5f4eb8
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.KUBEJOB_TESTPIPELINEINPUTS_CONTAINERDEV_APP_42E84DC_ENV_F86383A}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  BRANCH_NAME: >-
    ${{github.event.client_payload.branchName || github.event.branch ||
    github.ref_name}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Run :: Checkout repository for Code Scan'
        uses: actions/checkout@v4
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
          TICKETS: ${{ github.event.client_payload.tickets }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
              github.event.client_payload.tickets != null ||
              github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$TICKETS" ]; then
                echo "Tickets provided: $TICKETS"
                git checkout master
                readarray -d , -t tickets <<< "$TICKETS"
    
                for t in ${tickets[@]}
                do
                  echo "Trying to merge branch for $t"
                  branch=$(git branch -r | grep -o "origin/$t.*") || (echo "No branch found for $t, exiting"; exit 1)
                  echo "Found $branch"
    
                  if [ $(wc -l <<< $branch) -ne "1" ]; then
                    echo "Expecting only one branch for $t, aborting"
                    exit 2
                  fi
    
                  remote="${branch%%/*}"
                  remote_branch="${branch#*/}"
    
                  git fetch $remote $remote_branch || exit 3
                  git merge $remote/$remote_branch || exit 4
                done
                echo "Finished merging tickets"
              elif [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                echo "testing"
                echo "${{ github.event.client_payload.tickets }}"
                  
  
